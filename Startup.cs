using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using Swashbuckle.AspNetCore.Swagger;

namespace HospitalManagement
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }
        readonly string MyAllowSpecificOrigins = "_myAllowSpecificOrigins";
        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddAuthorization();
            services.AddTokenAuthentication(Configuration);
            services.AddControllers();
            services.AddCors(options =>
                                    {
                                        options.AddPolicy(name: MyAllowSpecificOrigins,
                                                            builder =>
                                                            {
                                                                builder.WithOrigins("http://localhost:3000").AllowAnyHeader()
                                                                                .AllowAnyMethod();
                                                            });
                                    });

            // string securityKey = "this_is_our_super_long_security_key_for_Hospital_management_system_project_2020_08_01$";
            // var symmetricSecurityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(securityKey));
            // services.AddAuthentication(x =>
            // {
            //     x.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
            //     x.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            //     x.DefaultSignInScheme = JwtBearerDefaults.AuthenticationScheme;
            // })
            // .AddJwtBearer(JwtBearerDefaults.AuthenticationScheme, x =>
            // {
            //     //x.RequireHttpsMetadata = false;
            //     // x.SaveToken = true;
            //     x.TokenValidationParameters = new TokenValidationParameters
            //     {
            //         //what to validate
            //         ValidateIssuer = true,
            //         ValidateAudience = true,
            //         ValidateIssuerSigningKey = true,
            //         //setup validate data
            //         ValidIssuer = "HospitalManagementSystem",
            //         ValidAudience = "receptionist",
            //         IssuerSigningKey = symmetricSecurityKey
            //     };
            // });
            // services.AddSwaggerGen();
            // services.AddSwaggerGen(c =>
            // {
            //     //The generated Swagger JSON file will have these properties.
            //     c.SwaggerDoc("v1", new Info
            //     {
            //         Title = "Outreach Reporting System",
            //         Version = "v1",
            //     });

            //     //Locate the XML file being generated by ASP.NET...
            //     var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
            //     var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

            //     //... and tell Swagger to use those XML comments.
            //     c.IncludeXmlComments(xmlPath);
            // });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            // app.UseMvc();
            // app.UseHttpsRedirection();

            app.UseRouting();
            app.UseCors(MyAllowSpecificOrigins);
            // app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
            // app.UseMvc();
            // Enable middleware to serve generated Swagger as a JSON endpoint.
            // app.UseSwagger();

            // Enable middleware to serve zswagger-ui (HTML, JS, CSS, etc.),
            // specifying the Swagger JSON endpoint.
            // app.UseSwaggerUI(c =>
            // {
            //     c.SwaggerEndpoint("/swagger/v1/swagger.json", "My API V1");
            //     c.RoutePrefix = string.Empty;
            // });

        }
    }
}
